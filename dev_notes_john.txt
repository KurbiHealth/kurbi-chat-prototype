Parsing / Variables:
	We want the providers and ourselves to be able to define variables, which can be referenced back to.  A simple example would be:
	  We ask the user for their name
	  then in later messages we can repeat their name back to them.  
	  Hello <name>

  On a more sophisticated level, we may like to provide a charting template - where the chart is generated based on user provided data.  

  The variables should also not require input by the user, they should be more complex things.  Like based on user interaction, the Provider may adjust the value of a 'urgency' index, which gets stored in their document


  Should this be rendered client-side or server-side?
  	If we render it client side: 	 
  	We can store the variables as variables and change their rendering or computational value at a later date.
  	Then how do we handle the assignment of a value to a variable?  Where does the final truth lay?  If the variables are maintained by the client, then the client needs to send the data back to the server for document creation.  If the client is continually asking the server for variable values, this could complicate the client code even further.  

  	If we render it server side:
  	How do we handle the display of the responses?  Like this interaction:
  		Choose One: [Black, White]
  		You chose Black.

  		Here the server assigns Black to the value of #Choice, when Black is selected.  From then on, #Choice will be parsed into Black.

  		So a later question of:
  		Previously you chose Black and Green, which is more delicious, Black or Green?

  		then the value of #Delicious would be Green... note: (instead of being #Choice2)

  	Okay, I kinda like that.  Where in the code is the assignment done.  How does the server know to populate the #Choice variable with the answer Black?



Lets go with server side.


Using variables:  
Variables can be fed back into the bot dialog.  But they can also be taken and put into documents or user records.  They also need to have datatypes.  
And a single question should be able to populate more than one variable field.  For example:

	What is the best tv show of ALL-TIME?
	#favTVShow = response;
	if(response != "Battlestar Galactica") #userIsIdiot = true;

okay, it seems clear to me that only a single variable should be set by a response.  But that variable can be an array.  
However!  The document generation needs to be able to do conditional stuff with the data.

Okay, but what if we want to be all secretive and farm data from the users without the provider knowing.  So we want to attach hidden variables that we use in our own documents?  Do we scope the variable space?  The variables should obviously be bot specific... so if we make variables on the operator for our uses, do we differentiate between an #email variable taken by different bots?

[_operatorVariable_]  (provider variable)
$_botVariable_$       (operator variable)


STORING VARIABLES
Okay, so use the on('connect') anonymous function to store the chat variables for a user has a problem.  When the user sets a variable, it will be stored in the user's scope.  So when the Bot replies, it can't see the variables defined by the user.  If the variable is global, then all users will share variables... So we need to scope it according to room.



------------------------
Storing the bot scripts
  So a provider can make some chat styles.
  The provider can also make some chat boxes.
  The provider can also give permission to different webpages to use.

  Provider object is acquired by whatever login system Matt implements.  There should be a user object or something on the request.  

  get/chatbox: 
      key == null, returns all chatboxes for that owner
      key == _id, chooses a style for a chatbox and returns it.



Error handling
MORGANjs (error handling in express)
Chatbox has a log endpoint, which pushes to stamplay.
  field: alert -- fatal crash, set alert = true.  will send an email.



FRESH DATABASE:
1) create a user (or admin user)
2) create a new chatbox at /backend
3) create a style at /backend
4) add the demo URL to the chatbox allowedURL list
5) add the style _id to the chatbox style list
6) edit the /convert endpoint to give it an owner.  
7) use /convert to import a bot dialog file.
8) add the bot name to the bot list in the chatbox


New Stuff for this Commit:
On The Fly Replacement and Document Creation:
added variables to the bot script, both Provider and Admin defined.  
A response can be flagged as providing a variable with the "variable" keyword.
added a parser to both the operator and the bot, to replace variables on the fly.
added a userVariable object to the operator and the bots, which holds variables as they are discovered.

The bot dialog is now read from the database instead of a file
The a temporary endpoint was added which will convert our dialog files into database entries.

Rewrote the bot_manager section.  The userVariables had to be saved and loaded.  This also required proper handling of user-disconnections.  Previously, the bots stayed in the room forever, this could cause memory issues or data loss on server restarts.
Now when a user disconnects, the bot will stay in the room for 15 seconds (this is because there is a delay between when a bot hears something and when the bot responds.  This gives the bot time to finish responding before being cut off.)  
When a user connects, the Operator will load the userVariables from the ChatRoom database object.  When a bot connects, it will do the same.
userVariables are saved to the database every time a message arrives (by the Operator)

Changed the datastructure:
There are now Providers
a Provider can create ChatBoxes, Styles, and Bots.

Chatbox
A Chatbox specifies the Styles and Bots it can use
The Chatbox also specifies which URLS have permission to use it.

Styles
The Style Object contains the compiled CSS / JS / and HTML as well as the configuration variables

Bots
The bot is divided between two database objects. 
  ChatBot - holds the Owner and Bot Name.  For the purpose of listing bots created by a provider.
  BotDialog - each document is a dialog snippet

Chatrooms
 The chatrooms now store the userVariables in addition to the message history.

Data:
There is now an abstract data layer above the database layer. This can be found in service.data.  Modules fetch data from a datasource and convert them into our native datalayer.  






/////////////
Nov 28
Need a default style to be chosen, when a chatbox has no style attached.
main.js(194)

Stamplay.Object.get -- needs the fields to be URIencoded to remove white space.  

To Do:
Document Creation
Session logs in separate files

Provider app: this needs to be able to:
create chat boxes
create styles
create bots
attach styles/bots to a chatbox

Bot Builder temp:
Needs a free-response field?

Bot Builder real:
Needs to be built!

DONE:
Error Logging? (stamplay endpoint) 
Stamplay History not working.
Better dev logging.